#!/bin/bash

OS="$(uname)"
wsl2=0
composer=
docker=
getracker=
ask_optional=0

if [[ "$OS" == "Linux" ]]; then
  SHARE_PATH="/usr/share"
elif [[ "$OS" == "Darwin" ]]; then
  SHARE_PATH="/usr/local/share"
fi

for opt in "$@"; do
  case $opt in
  --help)
    echo "Please run the bootstrap script"
    exit 0
    ;;
  --all)
    composer=1
    docker=1
    getracker=1
    wsl2=0
    ;;
  --wsl2) wsl2=1 ;;
  --composer) composer=1 ;;
  --no-composer) composer=0 ;;
  --docker) docker=1 ;;
  --no-docker) docker=0 ;;
  --getracker) getracker=1 ;;
  --no-getracker) getracker=0 ;;
  --ask-optional) ask_optional=1 ;;
  *)
    echo "unknown option: $opt"
    help
    exit 1
    ;;
  esac
done

ask() {
  while true; do
    read -p "$1 (y/n) " -r
    REPLY=${REPLY:-"y"}
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 1
    elif [[ $REPLY =~ ^[Nn]$ ]]; then
      return 0
    fi
  done
}

backup_file() {
  if [[ -L $1 ]]; then
    echo "Removing symlink $1"
    rm -f "$1"
  elif [[ -f $1 ]]; then
    echo "Creating backup of $1"
    mv "$1" "$1.bak"
  fi
}

symlink_file() {
  backup_file "$2"
  ln -s "$1" "$2"
}

detect_wsl() {
  [ -f /proc/sys/fs/binfmt_misc/WSLInterop ] && wsl2=1
  grep -qi Microsoft /proc/version && wsl2=1
  grep -qi Microsoft /proc/sys/kernel/osrelease && wsl2=1
}

# Install ohmyzsh
# https://github.com/ohmyzsh/ohmyzsh
install_zsh() {
  echo "Installing zsh"
  echo "--------------------"
  if [[ "$OS" == "Linux" ]]; then
    sudo apt install -y zsh
  elif [[ "$OS" == "Darwin" ]]; then
    brew install zsh
  fi

  echo "Installing ohmyzsh"
  echo "--------------------"
  rm -rf "$HOME/.oh-my-zsh/"
  backup_file ~/.zshrc
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  ln -sf "$HOME/.dotfiles/shell/.zshrc" "$HOME/.zshrc"
  ln -s "$HOME/.dotfiles/themes/james-custom.zsh-theme" "$HOME/.oh-my-zsh/themes/"

  echo "Installing ZSH tools"
  echo "--------------------"

  if [[ ! -d "$SHARE_PATH/zsh-autosuggestions" ]]; then
    sudo git clone https://github.com/zsh-users/zsh-autosuggestions.git "$SHARE_PATH/zsh-autosuggestions"
  fi

  if [[ ! -d "$SHARE_PATH/zsh-syntax-highlighting" ]]; then
    sudo git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$SHARE_PATH/zsh-syntax-highlighting"
  fi
}

install_tmux() {
  echo "Installing tmux"
  echo "---------------"

  # Install tmux
  brew install tmux

  # Add tmux plugins
  mkdir -p "$HOME/.tmux/plugins"
  git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"

  # Add tmux config
  symlink_file "$HOME/.dotfiles/shell/.tmux.conf" "$HOME/.tmux.conf"
}

install_fzf() {
  echo "Installing fzf"
  echo "--------------"

  brew install fzf
  $(brew --prefix)/opt/fzf/install --key-bindings --completion --no-update-rc
}

# Install homebrew
# https://docs.brew.sh/Homebrew-on-Linux
install_homebrew() {
  echo "Installing homebrew"
  echo "--------------------"
  rm -rf "$HOME/.linuxbrew"
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  if [[ "$OS" == "Linux" ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  elif [[ "$OS" == "Darwin" ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
}

install_dotfiles() {
  # Add global gitignore
  symlink_file "$HOME/.dotfiles/shell/.global-gitignore" "$HOME/.global-gitignore"
  git config --global core.excludesfile "$HOME/.global-gitignore"

  # Add vimrc
  symlink_file "$HOME/.dotfiles/shell/.vimrc" "$HOME/.vimrc"
}

install_node() {
  # Install nvm package manager
  # https://github.com/nvm-sh/nvm
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash

  # Source the nvm exports
  [ -f "$HOME/.dotfiles/shell/nvm/nvm" ] && source "$HOME/.dotfiles/shell/nvm/nvm"

  # Symlink the default-packages file
  symlink_file "$HOME/.dotfiles/shell/nvm/default-packages" "$NVM_DIR/default-packages"

  # Install Node 18
  nvm install 18
}

install_python() {
  # Install pyenv package manager
  brew install pyenv

  # Install Python build dependencies
  # https://github.com/pyenv/pyenv/wiki#suggested-build-environment
  if [[ $(uname) == "Linux" ]]; then
    # Ensure that OpenSSL v1.1 is not installed via Brew
    # as this will cause Python 3.10 install to fail
    brew uninstall --ignore-dependencies --force openssl@1.1

    sudo apt update -y && sudo apt install -y \
      make build-essential libssl-dev zlib1g-dev \
      libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
      libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
      python3.10-dev openssl
  elif [[ $(uname) == "Darwin" ]]; then
    brew install openssl readline sqlite3 xz zlib tcl-tk
  fi

  pyenv install 2.7
  pyenv install 3.10
  pyenv global 3.10

  # Should we reinstall it?
  # brew install openssl@1.1
}

install_asdf() {
  brew install asdf

  # Source the asdf exports
  source $(brew --prefix)/opt/asdf/libexec/asdf.sh

  symlink_file "$HOME/.dotfiles/shell/.tool-versions" "$HOME/.tool-versions"

  # Source the "asdf-reload" function to add/install all plugins in .tool-versions
  source ~/.dotfiles/shell/helpers/asdf
  asdf-reload
}

install_wslu() {
  if [[ "$wsl2" -eq 0 ]]; then
    return 0
  fi

  # https://github.com/wslutilities/wslu
  sudo add-apt-repository -y ppa:wslutilities/wslu
  sudo apt update -y
  sudo apt install -y wslu

  [ ! -f /usr/local/bin/xdg-open ] && sudo ln -s /usr/bin/wslview /usr/local/bin/xdg-open

#  function url_validator {
#  if [[ "$*" =~ ^https?:\/\/ ]]; then
#    return 0
#  else
#    return 1
#  fi
}

install_getracker() {
  if [[ "$getracker" -eq 1 ]]; then
    symlink_file "$HOME/.dotfiles/shell/getracker" "$HOME/.dotfiles/shell/optional/getracker.sh"
  fi
}

install_composer() {
  if [[ "$composer" -eq 1 ]]; then
    source "$HOME/.dotfiles/install/composer.sh"
  fi
}

install_docker() {
  # Install Docker if enabled and not running in WSL2
  if [[ "$docker" -eq 1 && "$wsl2" -eq 0 ]]; then
    echo "Install Docker"
    sudo apt install -y docker.io docker-compose docker-doc
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -a -G docker "$USER"
  fi
}

install_optional() {
  # Install optional requirements
  install_getracker
  install_composer
  install_docker
}

ask_options() {
  # Composer
  if [[ -z "$composer" ]]; then
    ask "Do you want to install PHP/Composer?"
    composer=$?
  fi

  # Docker
  if [[ -z "$docker" ]]; then
    ask "Do you want to install or configure Docker?"
    docker=$?
  fi

  # GE Tracker
  if [[ -z "$getracker" ]]; then
    ask "Do you want to install GE Tracker specific aliases?"
    getracker=$?
  fi
}

run_preinstall() {
  # Ask user their installation preferences for optional requirements
  ask_options

  # Detect whether the installer is running inside WSL
  # This will install (or not!) some other tools
  detect_wsl
}

run_installer() {
  run_preinstall

  # Install utils
  sudo apt update -y && sudo apt install -y \
    build-essential curl file git wget vim curl jq zip unzip

  install_homebrew
  install_zsh
  install_dotfiles
  install_tmux
  install_fzf
  install_node
  install_python
  install_asdf
  install_wslu

  install_optional
}

# TODO: Add aliases from .bashrc/.profile
# TODO: Add WSL specific config
# TODO: Lando alias
# TODO: WSL -> Docker Desktop config (otherwise, install Docker)

if [[ "$ask_optional" -eq 1 ]]; then

  run_preinstall
  install_optional
  exit 0

else

  run_installer

fi

# Change default shell
echo "Changing default shell to zsh, please authenticate:"
chsh -s $(which zsh)

echo "#################################"
echo
echo "- When running tmux for the first time"
echo "-- Press prefix + I (capital i, as in Install) to fetch the plugins"
echo
if [[ "$docker" -eq 1 ]]; then
  echo "- You may have to logout/login for Docker to work properly"
  echo
fi
echo "#################################"
