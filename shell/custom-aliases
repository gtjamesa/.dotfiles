#!/bin/bash

[ -f ~/.dotfiles/shell/aliases/docker ] && source ~/.dotfiles/shell/aliases/docker
[ -f ~/.dotfiles/shell/aliases/ztar ] && source ~/.dotfiles/shell/aliases/ztar
[ -f ~/.dotfiles/shell/aliases/wsl ] && source ~/.dotfiles/shell/aliases/wsl

# Git
alias glo='git log --oneline'
#alias gcom='git checkout master'

alias llog='clear; tail -f -n 0 storage/logs/laravel-$(date +%F).log'
alias prettyjson='python -m json.tool'

alias dc='docker-compose'

# Get external IP address
alias ipaddr='curl ipecho.net/plain; echo'

function mdc() {
  mkdir -p "$1" && cd "$1"
}

rector() {
  docker run --rm -v "$(pwd):/project" rector/rector:latest process "/project/$1" --config="/project/rector.yaml" --autoload-file /project/vendor/autoload.php
}

reqtime() {
  FORMAT=" \
    time_namelookup:  %{time_namelookup}\n \
       time_connect:  %{time_connect}\n \
    time_appconnect:  %{time_appconnect}\n \
   time_pretransfer:  %{time_pretransfer}\n \
      time_redirect:  %{time_redirect}\n \
 time_starttransfer:  %{time_starttransfer}\n \
                    ----------\n \
         time_total:  %{time_total}\n"

  curl -sk -o /dev/null -w "$FORMAT" "$1" "${@:2}"
}

speedtest() {
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -
}

speedtest-linode() {
  # https://gist.github.com/raulmoyareyes/34cbd643e2c93be64746
  # curl -o /dev/null http://speedtest.london.linode.com/1GB-london.bin

  if [[ "$1" == "--help" ]]; then
    cat << EOF
usage: $0 [SIZE]
    --help               Show this message
    SIZE                 Speedtest download size [100MB/1GB]
EOF
    return 0
  fi

  SPEEDTEST_SIZE="$1"

  if [[ -z "$1" ]]; then
    SPEEDTEST_SIZE="100MB"
  fi

  echo "Starting $SPEEDTEST_SIZE download. Available: 100MB / 1GB"

  curl -o /dev/null "http://speedtest.london.linode.com/$SPEEDTEST_SIZE-london.bin"
}

fileinfo() {
  local FILESIZE
  local HASH
  FILESIZE=$(stat --printf="%s" "$1")
  HASH=$(sha256sum "$1" | awk -F' ' '{print $1}')
  echo "$1"
  echo "Filesize: ${FILESIZE}"
  echo -e "SHA256: ${HASH}\n"
}

ngrok-docker() {
  if [ "$1" == "--help" ]; then
    echo "Usage: $0 <container> <port> <network> <subdomain>"
    echo
    echo "container\t - Container name"
    echo "port\t\t - Container port to expose"
    echo "network\t\t - Network to use (default: bridge)"
    echo "subdomain\t - Subdomain to use"
    echo -e "\nExample: $0 mycontainer 80"
    return 0
  fi

  DOCKER_CONTAINER="$1"
  DOCKER_PORT="$2"
  DOCKER_NETWORK=${3:-bridge}
  SUBDOMAIN="${4}.ngrok.io"

  CMD="docker run --rm -it --name ngrok -p 4040:4040 --link ${DOCKER_CONTAINER} --network ${DOCKER_NETWORK} -v ${HOME}/.ngrok2/:/home/ngrok/.config/ngrok/ wernight/ngrok ngrok http --domain=${SUBDOMAIN} ${DOCKER_CONTAINER}:${DOCKER_PORT}"
  echo "$CMD"
  tmux new-window "$CMD"
  tmux rename-window ngrok
}

# AWS
ec2-status() {
  aws ec2 describe-instances --instance-ids "$1" | jq ".Reservations[0].Instances[0].State.Name"
}

# Start and source a Python VirtualEnv
# venv - loads Python 3 by default
# venv 3 - loads Python 3
# venv 2/2.7 - loads Python 2.7
venv() {
  # Source the venv if it already exists
  if [[ -f "./venv/bin/activate" ]]; then
      source venv/bin/activate
      return
  fi

  PYVER=3

  # Set version
  if [[ -n "$1" ]]; then
    PYVER="$1"
  fi

  if [[ "$PYVER" == "2" ]]; then
    PYVER="2.7"
  fi

  virtualenv -p "/usr/bin/python$PYVER" venv
  source venv/bin/activate
}

# Attach tmux to current working directory
tmux-cwd() {
  tmux command-prompt -I "$PWD" -p "New session dir:" "attach -c %1"
}

mount-synology() {
  if [ "$1" == "--help" ]; then
    echo "Usage: $0 [mount] [path]"
    echo
    echo "mount\t - Mount path (default: home)"
    echo "path\t - Destination path (default: /mnt/synology)"
    echo -e "\nExample: $0 home /mnt/synology"
    return 0
  fi

  CREDS_PATH="$HOME/.synologycredentials"

  # Set MOUNT_PATH to $1 if it's not empty, otherwise use "/home"
  MOUNT_PATH="/${1:-home}"
  DST_PATH="${2:-/mnt/synology}"

  if [ ! -f "$CREDS_PATH" ]; then
    echo "username=USERNAME" > "$CREDS_PATH" && echo "password=PASSWORD" >> "$CREDS_PATH"
    echo "Please enter credentials at $CREDS_PATH"
    chmod 0600 "$CREDS_PATH"
    return 0
  fi

  [ ! -d "${DST_PATH}" ] && sudo mkdir -p "${DST_PATH}"
  sudo mount -t cifs "//192.168.0.100${MOUNT_PATH}" "${DST_PATH}" -o "uid=1000,credentials=$HOME/.synologycredentials,rw,nodfs,vers=3.0"
}

umount-synology() {
  MOUNT_PATH="${1:-/mnt/synology}"
  sudo umount "$MOUNT_PATH"
}

rand-str() {
  LENGTH=16
  [ -n "$1" ] && LENGTH="$1"
  tr -dc A-Za-z0-9 </dev/urandom | head -c "$LENGTH"; echo
}

ri() {
  # If we have a package.json and it contains "np" then use that instead
  if [ -f package.json ] && grep -q '"np":' package.json ; then
    echo -e "[${COLOR_BLUE}"${COLOR_CYAN}\!${COLOR_RESET}"${COLOR_RESET}] ${COLOR_GREEN}Running \"yarn np\"${COLOR_RESET}"
    yarn np
    return 0
  fi

  # Create .release-it.json if it doesn't exist
  if [ ! -f .release-it.json ] && [ -d .git ]; then
  cat <<EOF > .release-it.json
{
  "npm": {
    "ignoreVersion": true,
    "publish": false
  }
}
EOF
  fi

  release-it --only-version
}

# Clip a section of a video using ffmpeg
fclip() {
  if ! command -v ffmpeg &>/dev/null; then
    echo "ffmpeg not installed"
    return 1
  fi

  if [ -z "$4" ]; then
    echo "Usage: fclip <src-file> <dst-file> <start-timestamp> <end-timestamp>"
    return 1
  fi

  ffmpeg -ss "$3" -to "$4" -i "$1" -async 1 "$2"
}

fconcat() {
  if ! command -v ffmpeg &>/dev/null; then
    echo "ffmpeg not installed"
    return 1
  fi

  if [ -z "$3" ]; then
    echo "Usage: fconcat <dst-file> <src-file1 [src-file2 src-file3]...>"
    return 1
  fi

  TMPFILE=$(mktemp)
  DST_PATH="$1"

  for opt in "$@"; do
    # if arg is the same as first argument, skip
    if [ "$opt" != "$DST_PATH" ]; then
      FILE_PATH="$opt"

      # Prepend `pwd` if FILE_PATH is a relative path
      if [[ "$FILE_PATH" != /* ]]; then
        FILE_PATH="$(pwd)/${FILE_PATH}"
      fi

      echo "file '${FILE_PATH}'" >> "${TMPFILE}"
    fi
  done

  ffmpeg -safe 0 -f concat -i "${TMPFILE}" -c copy "${DST_PATH}"

  rm -f "${TMPFILE}"
}
