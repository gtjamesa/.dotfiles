#!/bin/bash

# Git
alias glo='git log --oneline'
#alias gcom='git checkout master'

alias llog='clear; tail -f -n 0 storage/logs/laravel-$(date +%F).log'
alias prettyjson='python -m json.tool'

alias dc='docker-compose'

# Get external IP address
alias ipaddr='curl ipecho.net/plain; echo'

# Alias "nx" to "npx nx" if it doesn't already exist
command -v nx || alias nx='npx nx'

function mdc() {
  mkdir -p "$1" && cd "$1"
}

rector() {
  docker run --rm -v "$(pwd):/project" rector/rector:latest process "/project/$1" --config="/project/rector.yaml" --autoload-file /project/vendor/autoload.php
}

reqtime() {
  FORMAT=" \
    time_namelookup:  %{time_namelookup}\n \
       time_connect:  %{time_connect}\n \
    time_appconnect:  %{time_appconnect}\n \
   time_pretransfer:  %{time_pretransfer}\n \
      time_redirect:  %{time_redirect}\n \
 time_starttransfer:  %{time_starttransfer}\n \
                    ----------\n \
         time_total:  %{time_total}\n"

  curl -sk -o /dev/null -w "$FORMAT" "$1"
}

speedtest() {
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -
}

speedtest-linode() {
  # https://gist.github.com/raulmoyareyes/34cbd643e2c93be64746
  # curl -o /dev/null http://speedtest.london.linode.com/1GB-london.bin

  if [[ "$1" == "--help" ]]; then
    cat << EOF
usage: $0 [SIZE]
    --help               Show this message
    SIZE                 Speedtest download size [100MB/1GB]
EOF
    return 0
  fi

  SPEEDTEST_SIZE="$1"

  if [[ -z "$1" ]]; then
    SPEEDTEST_SIZE="100MB"
  fi

  echo "Starting $SPEEDTEST_SIZE download. Available: 100MB / 1GB"

  curl -o /dev/null "http://speedtest.london.linode.com/$SPEEDTEST_SIZE-london.bin"
}

fileinfo() {
  local FILESIZE
  local HASH
  FILESIZE=$(stat --printf="%s" "$1")
  HASH=$(sha256sum "$1" | awk -F' ' '{print $1}')
  echo "$1"
  echo "Filesize: ${FILESIZE}"
  echo -e "SHA256: ${HASH}\n"
}

ngrok-docker() {
  CMD="docker run --rm -it --name ngrok -p 4040:4040 --link $1 --network $3 -v /mnt/c/Users/James/.ngrok2/:/home/ngrok/.ngrok2/ wernight/ngrok ngrok http -subdomain=$4 $1:$2"
  echo "$CMD"
  tmux new-window "$CMD"
  tmux rename-window ngrok
}

# AWS
ec2-status() {
  aws ec2 describe-instances --instance-ids "$1" | jq ".Reservations[0].Instances[0].State.Name"
}

# Start and source a Python VirtualEnv
# venv - loads Python 3 by default
# venv 3 - loads Python 3
# venv 2/2.7 - loads Python 2.7
venv() {
  # Source the venv if it already exists
  if [[ -f "./venv/bin/activate" ]]; then
      source venv/bin/activate
      return
  fi

  PYVER=3

  # Set version
  if [[ -n "$1" ]]; then
    PYVER="$1"
  fi

  if [[ "$PYVER" == "2" ]]; then
    PYVER="2.7"
  fi

  virtualenv -p "/usr/bin/python$PYVER" venv
  source venv/bin/activate
}

# Attach tmux to current working directory
tmux-cwd() {
  tmux command-prompt -I "$PWD" -p "New session dir:" "attach -c %1"
}

mount-synology() {
  CREDS_PATH="$HOME/.synologycredentials"

  # Set MOUNT_PATH to $1 if it's not empty, otherwise use "/home"
  MOUNT_PATH="/${1:-home}"
  DST_PATH="${2:-/mnt/synology}"

  if [[ ! -f "$CREDS_PATH" ]]; then
    echo "username=USERNAME" > "$CREDS_PATH" && echo "password=PASSWORD" >> "$CREDS_PATH"
    echo "Please enter credentials at $CREDS_PATH"
    chmod 0600 "$CREDS_PATH"
    return 0
  fi

  [ ! -d /mnt/synology ] && sudo mkdir -p "${DST_PATH}"
  sudo mount -t cifs "//192.168.0.100${MOUNT_PATH}" "${DST_PATH}" -o "uid=1000,credentials=$HOME/.synologycredentials,rw,nodfs,vers=3.0"
}

umount-synology() {
  sudo umount /mnt/synology
}

rand-str() {
  LENGTH=16
  [ -n "$1" ] && LENGTH="$1"
  tr -dc A-Za-z0-9 </dev/urandom | head -c "$LENGTH"; echo
}

ri() {
  # Create .release-it.json if it doesn't exist
  if [[ ! -f .release-it.json ]]; then
  cat <<EOF > .release-it.json
{
  "npm": {
    "ignoreVersion": true,
    "publish": false
  }
}
EOF
  fi

  release-it --only-version
}

ztar() {
  # Encrypt/decrypt single file using encryption level 15
  # zstd -15 yarn.lock
  # zstd -d yarn.lock.zst

  # Encrypt/decrypt directory
  # tar -I 'zstd -15' -cf rr-cache.tar.zst .git/rr-cache
  # tar -I zstd -xf rr-cache.tar.zst

  if [[ -z "$1" ]]; then
    cat << EOF
Usage: $0 [args] <FILE(s)>
    -x                   Extract

Examples:
    $ ztar README.md              Compress README.md to README.md.zst
    $ ztar -x README.md.zst       Extract README.md.zst to README.md
    $ ztar /tmp                   Compress /tmp to tmp.tar.zst
    $ ztar -x tmp.tar.zst         Extract tmp.tar.zst to /tmp
EOF
    return 1
  fi

  extract=0
  is_dir=0
  filename="$1"
  files="${@:2}"

  for opt in "$@"; do
    case $opt in
    -x)
      extract=1
      filename="$2"
      ;;
    esac
  done

  [ -d "$filename" ] && is_dir=1

  # Extract
  if [[ "$extract" -eq 1 ]]; then
    # Check if its a tar archive
    echo "$filename" | grep '.tar.zst' &> /dev/null
    [ $? -eq 0 ] && is_dir=1

    if [[ "$is_dir" -eq 1 ]]; then
      echo tar -I zstd -xf "$filename"
      tar -I zstd -xf "$filename"
    else
      echo zstd -d "$filename"
      zstd -d "$filename"
    fi
  # Compress
  else
    if [[ "$is_dir" -eq 1 ]]; then
      echo tar -I 'zstd -15' -cf "$filename.tar.zst" "$filename"
      tar -I 'zstd -15' -cf "$filename.tar.zst" "$filename"
    else
      echo zstd -15 "$filename"
      zstd -15 "$filename"
    fi
  fi
}
