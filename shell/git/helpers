#!/bin/bash

[ -f ~/.dotfiles/shell/git/p4merge ] && source ~/.dotfiles/shell/git/p4merge

gcom() {
  if [[ -n $(git branch --list main) ]]; then
    git checkout main
  else
    git checkout master
  fi
}

# Show all commits between two branches
gbh() {
  if [ -z "$2" ]; then
    echo "Usage: gbh <branch> <branch2>"
    echo "Example: gbh main inertia"
    return 1
  fi

  git log "$1..$2" --oneline --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'
}

# Remove last commit and unstage changes
gundo() {
  git reset --soft HEAD~
  git reset
}

# Remove the default aliases provided by zsh
unalias gunwip
unalias gwip

alias gunwip='git rev-list --max-count=1 --format="%s" HEAD | grep -q "wip:" && git reset HEAD~1'

gwip() {
  git add -A
  git rm $(git ls-files --deleted) 2> /dev/null
  git commit --no-verify --no-gpg-sign --message "wip: $1 [skip ci]"
}

gtomain() {
  CURRENT_BRANCH=$(git branch --show-current)
  MASTER_BRANCH=${1:-master}

  if [ "$CURRENT_BRANCH" != "$MASTER_BRANCH" ]; then
    echo "You must be on the '${MASTER_BRANCH}' branch to rename it to main"
    return 1
  fi

  git branch -m "$MASTER_BRANCH" main
  git fetch origin
  git branch -u origin/main main
  git remote set-head origin -a
}

# Sync local branch with remote (upstream)
gsup() {
  if ! command -v git_main_branch &>/dev/null; then
    echo "git_main_branch function not found - are you using zsh with git plugin enabled?"
    return 1
  fi

  UPSTREAM=${2:-upstream}
  MASTER_BRANCH=$(git_main_branch)
  CURRENT_BRANCH=$(git branch --show-current)
  TARGET_BRANCH=${1:-"$MASTER_BRANCH"}

  if [ -z "$1" ] || [ "$1" == "--help" ]; then
      echo -e "Sync local branch ($CURRENT_BRANCH) with remote (upstream)\n"
      echo "Usage: $0 [branch] [upstream]"
      echo -e "\nbranch\t\tThe *remote* branch to sync from upstream (default: $MASTER_BRANCH)"
      echo -e "upstream\tThe upstream remote to sync with (default: upstream)"
      return 1
    fi

  echo "Syncing $CURRENT_BRANCH with $UPSTREAM/$TARGET_BRANCH"

  git fetch "$UPSTREAM"
  git rebase "$UPSTREAM/$TARGET_BRANCH"
  git push
}

# Cleans leftover git merged files without using "git clean -df"
# This will ensure that any untracked files are not deleted
git-clean-merge() {
  find . -type f -name '*.orig' -exec rm -f {} \;
  find . -type f -name '*_BACKUP_*' -exec rm -f {} \;
  find . -type f -name '*_BASE_*' -exec rm -f {} \;
  find . -type f -name '*_LOCAL_*' -exec rm -f {} \;
  find . -type f -name '*_REMOTE_*' -exec rm -f {} \;
}

# Alias "git-clean-merge" to "gclm" if it doesn't already exist
command -v gclm || alias gclm='git-clean-merge'
command -v ghil || alias ghil='gh issue list'

if ! command -v gtam &>/dev/null; then
  function gtam() {
    if [ -z "$1" ]; then
      echo "Usage: gtam <tag> [commit]"
      return 1
    fi

    if [ -n "$2" ]; then
      git tag -a -m "$1" "$1" "$2"
    else
      git tag -a -m "$1" "$1"
    fi
  }
fi

# approve and merge a PR
function gham() {
  gh pr review -a "$1"
  gh pr merge -d "$1"

  if [ "$?" -ne 0 ]; then
    gh pr merge -d --admin "$1"
  fi

  if [ "$?" -eq 0 ]; then
    echo "PR merged successfully"
  fi
}

# Shell adaption of https://nitaym.github.io/ourstheirs/
git-ours-vs-theirs() {
  # Merge
  echo -e "\t${COLOR_LIGHT_BLUE}# git merge${COLOR_RESET}\n"
  echo -e "$ git checkout ${COLOR_YELLOW}main${COLOR_RESET}"
  echo -e "$ git merge ${COLOR_GREEN}feature${COLOR_RESET}"

  echo -ne "\nto select changes done in ${COLOR_YELLOW}main${COLOR_RESET}:\t\t"
  echo -e "$ git checkout ${COLOR_YELLOW}--ours${COLOR_RESET} codefile.js"

  echo -ne "to select changes done in ${COLOR_GREEN}feature${COLOR_RESET}:\t"
  echo -e "$ git checkout ${COLOR_GREEN}--theirs${COLOR_RESET} codefile.js"

  # Rebase
  echo -e "\n\t${COLOR_LIGHT_BLUE}# git rebase${COLOR_RESET}\n"
  echo -e "$ git checkout ${COLOR_GREEN}feature${COLOR_RESET}"
  echo -e "$ git rebase ${COLOR_YELLOW}main${COLOR_RESET}"

  echo -ne "\nto select changes done in ${COLOR_YELLOW}main${COLOR_RESET}:\t\t"
  echo -e "$ git checkout ${COLOR_YELLOW}--ours${COLOR_RESET} codefile.js"

  echo -ne "to select changes done in ${COLOR_GREEN}feature${COLOR_RESET}:\t"
  echo -e "$ git checkout ${COLOR_GREEN}--theirs${COLOR_RESET} codefile.js"
}

git-setup-p4merge() {
  git config --global diff.tool p4merge
  git config --global merge.tool p4merge
  git config --global difftool.p4merge.cmd '/mnt/c/Program\ Files/Perforce/p4merge.exe "$(wslpath -aw $LOCAL)" "$(wslpath -aw $REMOTE)"'
  git config --global mergetool.p4merge.cmd '/mnt/c/Program\ Files/Perforce/p4merge.exe "$(wslpath -aw $BASE)" "$(wslpath -aw $LOCAL)" "$(wslpath -aw $REMOTE)" "$(wslpath -aw $MERGED)"'
  git config --global mergetool.p4merge.trustexitcode false
}

# Set meld alias if we've installed it via flatpak
#if ! command -v meld && [ -d /var/lib/flatpak/app/org.gnome.meld ]; then
#  alias meld='flatpak run org.gnome.meld'
#fi

git-setup-meld() {
  MELD_CMD='meld'
  [ -d /var/lib/flatpak/app/org.gnome.meld ] && MELD_CMD='flatpak run org.gnome.meld'

  git config --global diff.tool meld
  git config --global merge.tool meld
  git config --global difftool.meld.cmd ''$MELD_CMD' "$LOCAL" "$REMOTE"'
  git config --global mergetool.meld.cmd ''$MELD_CMD' "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"'
  #git config --global mergetool.meld.trustexitcode false
}

# Enable gh completion
if command -v gh &>/dev/null; then
  if [ ! -f "$HOME/.oh-my-zsh/completions/_gh" ]; then
    gh completion -s zsh > "$HOME/.oh-my-zsh/completions/_gh"
  fi
fi
